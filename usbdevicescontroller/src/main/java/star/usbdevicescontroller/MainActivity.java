package star.usbdevicescontroller;import android.app.PendingIntent;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.hardware.usb.UsbDevice;import android.hardware.usb.UsbDeviceConnection;import android.hardware.usb.UsbInterface;import android.hardware.usb.UsbManager;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.View;import android.view.Menu;import android.view.MenuItem;import android.widget.Button;import android.widget.TextView;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import java.io.IOException;import java.util.HashMap;import java.util.Iterator;import star.usbdevicescontroller.broadcastreceiver.UsbBroadcastReceiver;import star.usbdevicescontroller.cmdfactory.CmdSet;import star.usbdevicescontroller.eventbus.CmdReceiveEvent;import star.usbdevicescontroller.usbmode.UsbActivity;import star.usbdevicescontroller.usbutil.BKDevice;//import star.usbdevicescontroller.usbmode.UsbActivity1;public class MainActivity extends AppCompatActivity {    private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";    private UsbBroadcastReceiver mUsbNotifyReceiver;    private UsbManager mUsbManager;    private TextView textView1, textView2;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        EventBus.getDefault().register(this);        registerReceiver();        textView1 = (TextView) findViewById(R.id.activity_main_cmd1);        textView2 = (TextView) findViewById(R.id.activity_main_cmd2);        tryGetUsbPermission();        initBtns();    }    private void registerReceiver() {        mUsbNotifyReceiver = new UsbBroadcastReceiver();        IntentFilter filter1 = new IntentFilter();        filter1.addAction("android.intent.action.PACKAGE_ADDED");        filter1.addDataScheme("package");        filter1.addAction("android.intent.action.PACKAGE_REMOVED");        filter1.addDataScheme("package");        registerReceiver(mUsbNotifyReceiver, filter1);    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void onCmdReceiveEvent(CmdReceiveEvent event) {        tryGetUsbPermission();    }    public void writeCommand(char cmd[]) {        final HashMap<String, UsbDevice> deviceList = mUsbManager.getDeviceList();        Iterator<UsbDevice> deviceIterator = deviceList.values().iterator();        while (deviceIterator.hasNext()) {            UsbDevice device = deviceIterator.next();            UsbDeviceConnection connection = mUsbManager.openDevice(device);            UsbInterface usbInterface = device.getInterface(device.getInterfaceCount() - 1);            BKDevice bkDevice = new BKDevice(connection, usbInterface);            try {//                Toast.makeText(MainActivity.this, "success 000000!", Toast.LENGTH_SHORT).show();                bkDevice.getBufferedWriter().flush();                bkDevice.getBufferedWriter().write(CmdSet.CMD_HEAD1, 0, CmdSet.CMD_HEAD1.length); // 1->write head1//                Toast.makeText(MainActivity.this, "success 11111!", Toast.LENGTH_SHORT).show();//                bkDevice.getBufferedWriter().write(CmdSet.CMD_HEAD1);                bkDevice.getBufferedWriter().flush();                sleep5ms();                bkDevice.getBufferedWriter().write(cmd, 0, cmd.length); // 2->write cmd                bkDevice.getBufferedWriter().flush();                sleep5ms();                char retArray[] = new char[200];                char tempArray[] = new char[200];                bkDevice.getBufferedReader().read(retArray, 0, retArray.length); // 3->read data[200]                sleep5ms();                bkDevice.getBufferedWriter().write(CmdSet.CMD_HEAD2, 0, CmdSet.CMD_HEAD2.length); // 4->write head2                bkDevice.getBufferedWriter().flush();                sleep5ms();                bkDevice.getBufferedReader().read(retArray, 0, retArray.length); // 5->read data[200]                StringBuffer stringBuffer = new StringBuffer();                for(int i=0; i<200; i++) {                    stringBuffer.append(retArray[i]);                }                textView1.setText(stringBuffer.toString());                bkDevice.getBufferedReader().read(tempArray, 0, tempArray.length); // 6->read data[200]                sleep5ms();//                Toast.makeText(MainActivity.this, "success in the end!", Toast.LENGTH_SHORT).show();            } catch (IOException e) {//                Toast.makeText(MainActivity.this, "read fail, return array len < 0", Toast.LENGTH_SHORT).show();                e.printStackTrace();            }        }    }    private void sleep5ms() {        try {            Thread.sleep(5);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    private void initBtns() {        Button btnLogin  = (Button) findViewById(R.id.activity_main_btnlogin);        Button btn1  = (Button) findViewById(R.id.activity_main_btn1);        Button btn2  = (Button) findViewById(R.id.activity_main_btn2);        Button btn3  = (Button) findViewById(R.id.activity_main_btn3);        View.OnClickListener onClickListener = new View.OnClickListener() {            @Override            public void onClick(View v) {                switch (v.getId()) {                    case R.id.activity_main_btnlogin:                        writeCommand(CmdSet.CMD_LOGIN);                        break;                    case R.id.activity_main_btn1:                        writeCommand(CmdSet.CMD_MASS_STORAGE);                        try {                            Thread.sleep(200);                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        startActivity(new Intent(MainActivity.this, UsbActivity.class));//                        startActivity(new Intent(MainActivity.this, UsbActivity1.class));                        finish();                        break;                    case R.id.activity_main_btn2://                        writeCommand("command2");                        break;                    case R.id.activity_main_btn3://                        writeCommand("command3");                        break;                }            }        };        btn1.setOnClickListener(onClickListener);        btn2.setOnClickListener(onClickListener);        btn3.setOnClickListener(onClickListener);        btnLogin.setOnClickListener(onClickListener);    }    private void tryGetUsbPermission(){        mUsbManager = (UsbManager) getSystemService(Context.USB_SERVICE);        IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);        registerReceiver(mUsbPermissionActionReceiver, filter);        PendingIntent mPermissionIntent = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0);        for (final UsbDevice usbDevice : mUsbManager.getDeviceList().values()) {            if(mUsbManager.hasPermission(usbDevice)){                initBtns();            }else{                mUsbManager.requestPermission(usbDevice, mPermissionIntent);            }        }    }    private final BroadcastReceiver mUsbPermissionActionReceiver = new BroadcastReceiver() {        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (ACTION_USB_PERMISSION.equals(action)) {                synchronized (this) {                    UsbDevice usbDevice = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);                    if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {                        if(null != usbDevice){                            initBtns();                        }                    } else {//                        Toast.makeText(context, String.valueOf("Permission denied for device" + usbDevice), Toast.LENGTH_LONG).show();                    }                }            }        }    };    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.usb_menu_main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    protected void onDestroy() {        super.onDestroy();        EventBus.getDefault().unregister(this);        unregisterReceiver(mUsbNotifyReceiver);    }}